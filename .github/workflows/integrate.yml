name: Integrate

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_VERSION: 2021.3.6f1
  PROJECT_PATH: Test

jobs:
  check-license:
    name: Check for Unity License
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.check-license.outputs.is_unity_license_set }}
    steps:
      - name: Check whether Unity Activation requests should be done
        id: check-license
        run: |
          echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
          echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"

  test-all-modes:
    name: Run EditMode and PlayMode Tests
    runs-on: ubuntu-latest
    needs: [check-license]
    if: ${{ needs.check-license.outputs.is_unity_license_set == 'true' }}
    strategy:
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Cache
        uses: actions/cache@v3.0.8
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-${{ env.PROJECT_PATH }}
          restore-keys: |
            Library-${{ env.PROJECT_PATH }}
            Library-

      - name: Run Tests
        uses: game-ci/unity-test-runner@v2
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          projectPath: ${{ env.PROJECT_PATH }}
          testMode: all
          artifactsPath: artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: Test Results (All)
          customParameters: -debugCodeOptimization
          coverageOptions: 'generateAdditionalMetrics'

      - name: Upload Results
        uses: actions/upload-artifact@v3.1.0
        if: always()
        with:
         name: Test Results (All)
         path: ${{ steps.tests.outputs.artifactsPath }}

      # - name: Upload XML report to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     name: Code Coverage Results (All)
      #     flags: automated
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     files: CodeCoverage/**/*.xml
      #     fail_ci_if_error: true
      #     verbose: true

  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: [check-license]
    if: ${{ needs.check-license.outputs.is_unity_license_set == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX
          - StandaloneWindows
          - StandaloneWindows64
          - StandaloneLinux64
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true

      - name: Cache files
        uses: actions/cache@v3.0.8
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-${{ env.PROJECT_PATH }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ env.PROJECT_PATH }}-
            Library-

      - name: Build
        uses: game-ci/unity-builder@v2.1.1
        with:
          buildName: Pokerogues
          projectPath: ${{ env.PROJECT_PATH }}
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3.1.0
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  lint:
    name: Lints code base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_CSHARP: true
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
